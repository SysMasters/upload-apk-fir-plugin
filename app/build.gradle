apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.demo.plugin'
//uploadApk {
//    fir {
//        appName = "你的app名称"
//        iconPath = "src/main/res/mipmap-xxxhdpi/ic_launcher.png"
//        token = "fir平台的token"
//    }
//    dingTalk{
//        webHook = "钉钉机器人的webhook"
//        title = "Android：xxx打包完成"
//        content = "带关键字的消息内容" //更新内容
//        isAtAll = false  // 是否at所有人
//        atMobiles = ["手机号1","手机号2"]   //at某些人
//    }
//
//}


// 上传蒲公英平台配置
//uploadApk {
//    pgyer {
//        apiKey = "蒲公英平台的apiKey"
//    }
//    dingTalk{
//        webHook = "钉钉机器人的webhook"
//        title = "Android：xxx打包完成"
//        content = "带关键字的消息内容" //更新内容
//        qrTitle = "Android：xxx二维码下载地址" // （蒲公英支持二维码获取）二维码标题
//        qrContent = "带关键字的二维码下载消息内容" // （蒲公英支持二维码获取）二维码内容
//        isAtAll = false  // 是否at所有人
//        atMobiles = ["手机号1","手机号2"]   //at某些人
//    }
//
//}

// 上传sftp配置
//uploadApk{
//    sftp {
//        username = "sftp用户名"
//        password = "sftp密码"
//        host = "sftp服务器地址"
//        port = 22 // 端口号
//        remotePath = "/xxx/xxx" // 上传到服务器的路径
//        installUrl = "http://xxx.xxx.xxx.xxx/" // 安装地址前缀
//        qrApiUrl = "生成二维码api地址"
//    }
//    dingTalk{
//        webHook = "钉钉机器人的webhook"
//        title = "Android：xxx打包完成"
//        content = "带关键字的消息内容" //更新内容
//        qrTitle = "Android：xxx二维码下载地址" // 二维码标题
//        qrContent = "带关键字的二维码下载消息内容" // 二维码内容
//        isAtAll = false  // 是否at所有人
//        atMobiles = ["手机号1","手机号2"]   //at某些人
//    }
//}
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.xiaojianjun.uploadapkfirmplugin"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
//project.android.applicationVariants.all { variant ->
//    println("assemble${variant.name.capitalize()}Fir")
//}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.jcraft:jsch:0.1.53'
}